#ifndef LIBPEX_H
#define LIBPEX_H

#ifdef __cplusplus
extern "C" {
#endif

#include <lib/libpe/pe.h>

typedef enum {
	PEX_E_OK = 0,

    PEX_E_NULL_PTR,
	PEX_E_MALLOC_FAIL,
	PEX_E_OPEN_FILE_FAILED,
	
} pex_err_e;

/* parse pe file */
typedef struct {
    pe_ctx_t pe_ctx;
} parse_pe_ctx_t;

// General functions
parse_pe_ctx_t *parse_pe_init();
int parse_pe_load_file(parse_pe_ctx_t *ctx, char *path);
void parse_pe_unload_file(parse_pe_ctx_t *ctx);
bool pex_is_loaded(parse_pe_ctx_t *ctx);
void parse_pe_free(parse_pe_ctx_t *ctx);
int pex_parse_pe(parse_pe_ctx_t *ctx);
bool pex_is_pe(parse_pe_ctx_t *ctx);
bool pex_is_dll(parse_pe_ctx_t *ctx);

// Header functions
IMAGE_DOS_HEADER *pex_dos(parse_pe_ctx_t *ctx);
IMAGE_FILE_HEADER *pex_file(parse_pe_ctx_t *ctx);
IMAGE_OPTIONAL_HEADER *pex_optional(parse_pe_ctx_t *ctx);
uint32_t pex_directories_count(parse_pe_ctx_t *ctx);
IMAGE_DATA_DIRECTORY **pex_directories(parse_pe_ctx_t *ctx);
IMAGE_DATA_DIRECTORY *pex_directory_by_entry(parse_pe_ctx_t *ctx, ImageDirectoryEntry entry);
uint16_t pex_sections_count(parse_pe_ctx_t *ctx);
IMAGE_SECTION_HEADER **pex_sections(parse_pe_ctx_t *ctx);
IMAGE_SECTION_HEADER *pex_section_by_name(parse_pe_ctx_t *ctx, char *section_name);

//Print functions
void print_dos_header(IMAGE_DOS_HEADER *header);
void print_file_header(IMAGE_FILE_HEADER *header);

#ifdef __cplusplus
} // extern "C"
#endif

#endif

