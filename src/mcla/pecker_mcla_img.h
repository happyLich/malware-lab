#ifndef __PECKER_MCLA_IMG_H__
#define __PECKER_MCLA_IMG_H__
#include <base/pecker.h>

#ifdef __cplusplus
extern "C"
{
#endif

#define GLCM_GRAY_LEVEL         256
#define GLCM_ANGLE_HORIZATION    0
#define GLCM_ANGLE_VERTICAL      1
#define GLCM_ANGLE_DIGONAL       2

#define GLCM_FEAT_VAL_NUM        8

typedef struct
{
    double _mean;
    double _variance;
    double _contrast;
    double _dissimilarity;
    double _homogeneity;
    double _asm;
    double _correlation;
    double _entropy;
} glcm_val_t;

int calc_all_glcm(uint8_t *data, uint32_t size, uint32_t width, uint8_t angel, int dist, glcm_val_t *glcm_val);

double *make_glcm(uint8_t *data, uint32_t size, uint32_t width, uint8_t angel, int dist);
void free_glcm(double *glcm);
double calc_contrast(double *glcm);
double calc_dissimilarity(double *glcm);
double calc_homogeneity(double *glcm);
double calc_asm(double *glcm);
double calc_entropy(double *glcm);

int read_img(char *filename);
int binary_to_img(uint8_t *data, uint32_t size, uint32_t height, uint32_t width, char *dst);

//creat image feature train data
#define IMAGE_NODE_REALLOC_SIZE  1024

typedef struct
{
    char *path;
    int lable;
} img_node_t;

typedef struct
{
    img_node_t *img_list;
    uint32_t img_num;
    uint32_t img_max;
    uint32_t width;
    int dist;
    uint8_t angel;
} img_train_data_para_t;

int init_img_train_data_para(img_train_data_para_t *para, uint32_t width, int dist, uint8_t angel);
int add_img_train_data(img_train_data_para_t *para, char *src, int lable);
int creat_img_train_data(img_train_data_para_t *para, char *dst);
int free_img_train_data_para(img_train_data_para_t *para);

#ifdef __cplusplus
}
#endif
#endif

