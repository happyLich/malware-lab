#ifndef __PECKER_MCLA_TRAIN_H__
#define __PECKER_MCLA_TRAIN_H__
#include <base/pecker.h>
#include <mcla/pecker_mcla_img.h>

typedef struct
{
    uint8_t *feat;
    uint32_t *c_count;
    uint32_t df;
    double ece;
} feat_node_t;

typedef struct
{
    feat_node_t *feat_list;
    uint32_t feat_num;
    uint32_t *c_count;
    uint32_t cn;
    uint32_t sample_num;
} train_feat_para_t;

uint8_t **get_asm_opcode_seq(char *filename);
uint8_t **get_n_gram_seq(uint8_t **seq, int n);
void free_seq(uint8_t **seq);
int train_feature(train_feat_para_t *para, char *dst, uint32_t num);

//creat image feature train data
#define IMAGE_NODE_REALLOC_SIZE  1024

typedef struct
{
    glcm_val_t glcm_v;
    int lable;
} img_node_t;

typedef struct
{
    img_node_t *img_list;
    uint32_t img_num;
    uint32_t img_max;
    uint32_t width;
    int dist;
    uint8_t angel;
} img_train_data_para_t;

int init_img_train_data_para(img_train_data_para_t *para, uint32_t width, int dist, uint8_t angel);
int add_img_train_data(img_train_data_para_t *para, char *src, int lable);
int creat_img_train_data(img_train_data_para_t *para, char *dst);
int free_img_train_data_para(img_train_data_para_t *para);

#endif

